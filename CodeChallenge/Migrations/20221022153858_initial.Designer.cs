// <auto-generated />
using System;
using CodeChallenge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeChallenge.Migrations
{
    [DbContext(typeof(CodeChallengeContext))]
    [Migration("20221022153858_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CodeChallenge.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            BirthDate = new DateTime(1965, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jennifer Anniston"
                        },
                        new
                        {
                            ActorId = 2,
                            BirthDate = new DateTime(1968, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Courtney Cox"
                        });
                });

            modelBuilder.Entity("CodeChallenge.Models.ActorTVShow", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("TVShowId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "TVShowId");

                    b.HasIndex("TVShowId");

                    b.ToTable("ActorTVShows", (string)null);

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            TVShowId = 1
                        },
                        new
                        {
                            ActorId = 2,
                            TVShowId = 1
                        });
                });

            modelBuilder.Entity("CodeChallenge.Models.Episode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<int>("TVShowId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpisodeId");

                    b.HasIndex("TVShowId");

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            EpisodeId = 1,
                            Description = "Test",
                            Duration = 21.5,
                            TVShowId = 1,
                            Title = "Pilot"
                        },
                        new
                        {
                            EpisodeId = 2,
                            Description = "Test",
                            Duration = 23.199999999999999,
                            TVShowId = 2,
                            Title = "Pilot"
                        });
                });

            modelBuilder.Entity("CodeChallenge.Models.TVShow", b =>
                {
                    b.Property<int>("TVShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TVShowId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TVShowId");

                    b.ToTable("TVShows");

                    b.HasData(
                        new
                        {
                            TVShowId = 1,
                            Description = "A comedy show",
                            Genre = "Comedy",
                            ReleaseDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Friends"
                        },
                        new
                        {
                            TVShowId = 2,
                            Description = "A small TV show",
                            Genre = "Romance",
                            ReleaseDate = new DateTime(1984, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Sopranos"
                        });
                });

            modelBuilder.Entity("CodeChallenge.Models.ActorTVShow", b =>
                {
                    b.HasOne("CodeChallenge.Models.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeChallenge.Models.TVShow", "TVShow")
                        .WithMany()
                        .HasForeignKey("TVShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("TVShow");
                });

            modelBuilder.Entity("CodeChallenge.Models.Episode", b =>
                {
                    b.HasOne("CodeChallenge.Models.TVShow", "TVShow")
                        .WithMany("Episodes")
                        .HasForeignKey("TVShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TVShow");
                });

            modelBuilder.Entity("CodeChallenge.Models.TVShow", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
